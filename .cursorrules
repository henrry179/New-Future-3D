# 🎯 NewFutures VFX - Unified Cursor Rules
# 统一Cursor开发规则集合 v5.0

## 🕐 实时时间记录原则
- **每次开发更新必须使用当前实时日期和时间**，格式严格为 `YYYY-MM-DD HH:MM:SS`
- **时间获取方式**: 使用当前系统的实时时间，不得使用预设或估算时间
- **记录内容包括**: 优化的模块名称、具体改进点、技术难点、性能指标

## 📋 核心开发流程

### 1. 实时进度记录要求 ⏰
- 每次优化任何模块功能，都必须将优化进度详细更新到 `README.md` 文档中
- 记录格式: 严格使用 `YYYY-MM-DD HH:MM:SS` 格式（24小时制）

### 2. 文档同步推送流程 🚀
- 每次将优化进度更新到 `README.md` 后，必须立即推送到 GitHub 仓库
- 标准操作流程:
  ```bash
  git add .
  git commit -m "更新README，记录[模块名称]优化进度 - $(date '+%Y-%m-%d %H:%M:%S')"
  git push
  ```
- 提交信息规范: 必须包含优化的模块名称和当前时间戳

### 3. 持续迭代检查机制 🔄
- 每次推送到 GitHub 后，需重新检查项目的其他文件和模块功能
- 审查 `README.md` 的"开发进度"板块，明确剩余开发任务优先级
- 检查代码目录和模块，识别未完成、可优化的部分

### 4. 30秒轻音乐提醒系统 🎵
- **每次自动完成进度任务后，必须播放30秒左右的轻音乐提醒用户任务已完成**

## 🎬 3D VFX开发专用规则

### 3D特效优化标准
- **粒子系统**: 最低支持100万粒子实时渲染，60FPS@1080p
- **流体模拟**: 256³分辨率网格，30FPS渲染性能
- **光线追踪**: 实时全局光照，支持4K输出
- **物理模拟**: 刚体、软体、流体统一物理引擎
- **AI特效**: 深度学习驱动的自动特效生成

### WebGL/Three.js最佳实践
- 使用现代WebGL 2.0特性
- 启用GPU实例化渲染
- 实现LOD (Level of Detail) 系统
- 优化着色器性能
- 内存池管理GPU资源

### 性能监控要求
- FPS实时监控 (目标: >60FPS)
- GPU内存使用率监控
- 粒子数量实时显示
- 渲染管线性能分析
- 自动性能调优

## 🎼 30秒轻音乐提醒策略 (Enhanced)

### 🎭 智能音乐选择系统
```bash
# 基于任务重要性的音乐分级
get_music_type() {
    local commit_msg="$1"
    
    if [[ "$commit_msg" =~ (3D|VFX|渲染|特效|重大功能|架构升级) ]]; then
        echo "achievement"  # 古典轻音乐 - 重大成就
    elif [[ "$commit_msg" =~ (优化|重构|性能|算法|GPU|着色器) ]]; then
        echo "optimization" # 钢琴轻音乐 - 技术优化  
    elif [[ "$commit_msg" =~ (界面|UI|用户体验|交互) ]]; then
        echo "interface"    # 电子轻音乐 - 界面开发
    else
        echo "daily"        # 自然轻音乐 - 日常任务
    fi
}

# 智能音量控制
get_smart_volume() {
    local hour=$(date +%H)
    local music_type="$1"
    
    if [[ $hour -ge 22 || $hour -le 7 ]]; then
        echo "10"  # 深夜模式
    elif [[ $hour -ge 8 && $hour -le 18 ]]; then
        case "$music_type" in
            "achievement") echo "30" ;;
            "optimization") echo "25" ;;
            "interface") echo "20" ;;
            *) echo "20" ;;
        esac
    else
        echo "15"  # 晚间模式
    fi
}
```

### 🎶 多样化音乐库
```bash
# 扩展音乐类型支持
play_enhanced_music() {
    local music_type="$1"
    local volume=$(get_smart_volume "$music_type")
    
    case "$music_type" in
        "achievement")
            # 古典音乐 - 重大成就
            play_classical_music "$volume"
            say "🎼 重大VFX功能完成！享受30秒古典音乐庆祝时刻！" --voice="Ting-Ting"
            ;;
        "optimization") 
            # 钢琴音乐 - 技术优化
            play_piano_music "$volume"
            say "🎹 技术优化完成！请欣赏优雅的钢琴轻音乐！" --voice="Mei-Jia"
            ;;
        "interface")
            # 电子音乐 - 界面开发
            play_electronic_music "$volume"
            say "🎧 界面开发完成！现代电子音乐为您放松！" --voice="Yu-shu"
            ;;
        "daily")
            # 自然音乐 - 日常任务
            play_nature_music "$volume"
            say "🎶 日常任务完成！舒缓自然音乐助您放松！" --voice="Sin-ji"
            ;;
    esac
}
```

## 🛠️ 自动化开发工作流

### Git提交增强脚本
```bash
#!/bin/bash
# 增强版开发进度自动化脚本

CURRENT_TIME=$(date '+%Y-%m-%d %H:%M:%S')
COMMIT_MSG="$1"

# 检测项目类型和模块
detect_project_module() {
    local changed_files=$(git diff --cached --name-only)
    
    if echo "$changed_files" | grep -q "\.html\|\.css\|\.js"; then
        echo "前端界面"
    elif echo "$changed_files" | grep -q "\.py\|requirements\.txt"; then
        echo "后端引擎"
    elif echo "$changed_files" | grep -q "README\.md"; then
        echo "项目文档" 
    elif echo "$changed_files" | grep -q "\.glsl\|\.vert\|\.frag"; then
        echo "着色器系统"
    else
        echo "通用模块"
    fi
}

# 自动生成详细commit信息
generate_enhanced_commit() {
    local module=$(detect_project_module)
    local files_count=$(git diff --cached --name-only | wc -l)
    local additions=$(git diff --cached --numstat | awk '{add+=$1} END {print add+0}')
    local deletions=$(git diff --cached --numstat | awk '{del+=$2} END {print del+0}')
    
    echo "${COMMIT_MSG} - ${module}模块优化 (+${additions}/-${deletions} lines, ${files_count} files) - ${CURRENT_TIME}"
}

# 执行提交流程
ENHANCED_MSG=$(generate_enhanced_commit)
git add .
git commit -m "$ENHANCED_MSG"
git push

# 播放对应轻音乐
MUSIC_TYPE=$(get_music_type "$COMMIT_MSG")
play_enhanced_music "$MUSIC_TYPE"

echo "✅ 自动化工作流完成 - 模块: $(detect_project_module)"
```

## 📊 开发质量检查清单 (Enhanced)

### 🔍 代码质量检查
- [ ] ESLint/Prettier格式化检查通过
- [ ] TypeScript类型检查无错误  
- [ ] WebGL着色器编译成功
- [ ] Three.js版本兼容性确认
- [ ] 浏览器兼容性测试完成

### 🎮 VFX性能检查
- [ ] 粒子系统帧率测试 (>60FPS)
- [ ] GPU内存使用率监控 (<80%)
- [ ] 着色器优化验证
- [ ] LOD系统正常工作
- [ ] 移动端性能适配完成

### 📱 用户体验检查  
- [ ] 响应式设计测试通过
- [ ] 触控交互优化完成
- [ ] 加载时间优化 (<3秒)
- [ ] 错误处理机制完善
- [ ] 无障碍访问支持

### 🎵 音乐提醒系统检查
- [ ] 30秒轻音乐正常播放
- [ ] 音量智能调节工作正常
- [ ] 深夜模式正确触发
- [ ] 多种音乐类型可切换
- [ ] 用户可手动禁用音乐

## 🔧 开发环境配置

### 必需工具
- Node.js 18+ (支持ES2022)
- Python 3.10+ (AI模型支持)
- Docker & Docker Compose
- Git 2.30+
- Modern Browser (Chrome 90+, Firefox 88+)

### 推荐VS Code扩展
- ES6 String HTML
- Shader languages support  
- Three.js Snippets
- WebGL GLSL Editor
- Live Server
- GitLens

### 性能监控工具
- Chrome DevTools
- WebGL Inspector
- GPU Profile
- Memory Monitor

## 🎨 项目文件组织规范

```
newfutures-vfx/
├── 📁 public/           # 静态资源和Web界面
│   ├── index.html       # 主页面
│   ├── css/styles.css   # 样式文件
│   └── js/              # JavaScript模块
│       ├── app.js       # 主应用逻辑
│       ├── effects.js   # 特效系统
│       └── renderer.js  # 渲染引擎
├── 📁 src/              # 核心源代码
│   ├── effects/         # 特效实现
│   ├── core/           # 核心引擎
│   └── utils/          # 工具函数
├── 📁 shaders/         # GLSL着色器
├── 📁 assets/          # 3D模型和纹理
└── 📁 docs/           # 技术文档
```

## 🚀 持续集成/部署 (CI/CD)

### GitHub Actions工作流
```yaml
name: VFX Build & Deploy
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
    - run: npm install
    - run: npm run build
    - run: npm test
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
```

### Docker化部署
```dockerfile
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 8000
CMD ["npm", "start"]
```

---

**📍 规则位置**: `.cursorrules`  
**🔄 最后更新**: 2025-06-22 15:45:51  
**📊 规则版本**: v5.0 - Unified VFX Development Rules  
**👨‍💻 维护团队**: NewFutures VFX Development Team

**🎵 特别说明**: 本规则集成了30秒轻音乐提醒系统，开发过程更加愉悦高效！ 